# -*- coding: utf-8 -*-
"""C-113.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14MZyGwK-QSfkYTCFmMo1Ba-7fcEttMEU
"""

from google.colab import files
files=files.upload()

import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
import pandas as pd
import statistics
import csv
import plotly.express as px
df=pd.read_csv('data.csv')
fig=px.scatter(df,y='quant_saved',color='rem_any')
fig.show()

with open('data.csv',newline='') as f:
  reader=csv.reader(f)
  saving_data=list(reader)
saving_data.pop(0)
total_entries=len(saving_data)
total_people_given_reminder=0
for data in saving_data:
  if int(data[3])==1:
    total_people_given_reminder+=1
fig=go.Figure(go.Bar(x=['Reminded','NoT Reminded'],y=[total_people_given_reminder,(total_entries-total_people_given_reminder)]))
fig.show()

All_savings=[]
for data in saving_data:
  All_savings.append(float(data[0]))
print(f"mean of savings-{statistics.mean(All_savings)}")
print(f"median of savings-{statistics.median(All_savings)}")
print(f"mode of savings-{statistics.mode(All_savings)}")
print(f"mode of savings-{statistics.stdev(All_savings)}")

reminded_savings=[]
not_reminded_savings=[]
for data in saving_data:
  if int(data[3])==1:
    reminded_savings.append(float(data[0]))
  else:
    not_reminded_savings.append(float(data[0]))
print('Result of people whon were given reminder:')
print(f"mean of savings-{statistics.mean(reminded_savings)}")
print(f"median of savings-{statistics.median(reminded_savings)}")
print(f"mode of savings-{statistics.mode(reminded_savings)}")
print(f"mode of savings-{statistics.stdev(reminded_savings)}")
print('Result of people whon were given not reminder:')
print(f"mean of savings-{statistics.mean(not_reminded_savings)}")
print(f"median of savings-{statistics.median(not_reminded_savings)}")
print(f"mode of savings-{statistics.mode(not_reminded_savings)}")
print(f"mode of savings-{statistics.stdev(not_reminded_savings)}")

import numpy as np 
age = [] 
savings = [] 
for data in saving_data: 
  if float(data[5]) != 0: 
    age.append(float(data[5])) 
    savings.append(float(data[0])) 
    correlation = np.corrcoef(age, savings) 
print(f"Correlation between the age of the person and their savings is - {correlation[0,1]}")

import plotly.figure_factory as ff 
fig = ff.create_distplot([df["quant_saved"].tolist()], ["Savings"], show_hist=False) 
fig.show()

import seaborn as sns
sns.boxplot(data=df,x=df['quant_saved'])

q1=df['quant_saved'].quantile(0.25)
q3=df['quant_saved'].quantile(0.75)
iqr=q3-q1
print(f'Q1-{q1}')
print(f'Q3-{q3}')
print(f'IQR-{iqr}')
lower_whisker=q1-1.5*iqr
upper_whisker=q3+1.5*iqr
print(f'Lower whisker-{lower_whisker}')
print(f'Upper whisker-{upper_whisker}')
new_df=df[df['quant_saved']<upper_whisker]

all_savings=new_df['quant_saved'].tolist()
print(f'Mean of savings-{statistics.mean(all_savings)}')
print(f'Median of savings-{statistics.median(all_savings)}')
print(f'Mode of savings-{statistics.mode(all_savings)}')
print(f'Standard deviation of savings-{statistics.stdev(all_savings)}')
fig=ff.create_distplot([new_df['quant_saved'].tolist()],['savings'],show_hist=False)
fig.show()

import random
sampling_mean_list=[]
for i in range(1000):
  temp_list=[]
  for j in range(100):
    temp_list.append(random.choice(all_savings))
  sampling_mean_list.append(statistics.mean(temp_list))
mean_sampling=statistics.mean(sampling_mean_list)
fig=ff.create_distplot([sampling_mean_list],['savings(sampling)'],show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling,mean_sampling],y=[0,0.1],mode='lines',name='mean'))
fig.show()
print(f"Standard deviation of the sampling data - {statistics.stdev(sampling_mean_list)}")
print(f"Mean of Population - {statistics.mean(all_savings)}") 
print(f"Mean of Sampling Distribution - {mean_sampling}")

temp_df = new_df[new_df.age != 0] 
age = temp_df["age"].tolist() 
savings = temp_df["quant_saved"].tolist() 
correlation = np.corrcoef(age, savings) 
print(f"Correlation between the age of the person and their savings is - {correlation[0,1]}")

reminded_df = new_df.loc[new_df["rem_any"] == 1] 
not_reminded_df = new_df.loc[new_df["rem_any"] == 0] 
print(reminded_df.head()) 
print(not_reminded_df.head())
not_reminded_savings = not_reminded_df["quant_saved"].tolist() 
sampling_mean_list_not_reminded = [] 
for i in range(1000): 
  temp_list = [] 
  for j in range(100): 
    temp_list.append(random.choice(not_reminded_savings)) 
  sampling_mean_list_not_reminded.append(statistics.mean(temp_list)) 
mean_sampling_not_reminded = statistics.mean(sampling_mean_list_not_reminded) 
stdev_sampling_not_reminded = statistics.stdev(sampling_mean_list_not_reminded) 
print(f"Mean of Sampling (Not Reminded) -> {mean_sampling_not_reminded}") 
print(f"Standard Deviation of Sampling (Not Reminded) -> {stdev_sampling_not_reminded}")
fig = ff.create_distplot([sampling_mean_list_not_reminded], ["Savings (Sampling)"], show_hist=False) 
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="MEAN")) 
fig.show()
first_std_deviation_start = mean_sampling_not_reminded-stdev_sampling_not_reminded 
first_std_deviation_end = mean_sampling_not_reminded+stdev_sampling_not_reminded 
print(f"First (start) - {first_std_deviation_start} and First (end) - {first_std_deviation_end}") 
second_std_deviation_start = mean_sampling_not_reminded-(2*stdev_sampling_not_reminded) 
second_std_deviation_end = mean_sampling_not_reminded+(2*stdev_sampling_not_reminded) 
print(f"Second (start) - {second_std_deviation_start} and Second (end) - {second_std_deviation_end}")
third_std_deviation_start = mean_sampling_not_reminded-(3*stdev_sampling_not_reminded)
third_std_deviation_end = mean_sampling_not_reminded+(3*stdev_sampling_not_reminded)
print(f"Third (start) - {third_std_deviation_start} and Third (end) - {third_std_deviation_end}")
reminded_savings = reminded_df["quant_saved"].tolist() 
sampling_mean_list_reminded = [] 
for i in range(1000): 
  temp_list = [] 
  for j in range(100): 
    temp_list.append(random.choice(reminded_savings)) 
    sampling_mean_list_reminded.append(statistics.mean(temp_list)) 
mean_sampling_reminded = statistics.mean(sampling_mean_list_reminded) 
stdev_sampling_reminded = statistics.stdev(sampling_mean_list_reminded) 
print(f"Mean of Sampling (Reminded) -> {mean_sampling_reminded}") 
print(f"Standard Deviation of Sampling (Reminded) -> {stdev_sampling_reminded}") 
fig = ff.create_distplot([sampling_mean_list_reminded], ["Savings (Sampling)"], show_hist=False) 
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="MEAN")) 
fig.show()
z_score = (mean_sampling_reminded - mean_sampling_not_reminded) / stdev_sampling_not_reminded 
print(f"Z-Score is - {z_score}")